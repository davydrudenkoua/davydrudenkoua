"use strict";(self.webpackChunkdavydrudenko_writing=self.webpackChunkdavydrudenko_writing||[]).push([[151],{2295:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"aks/aks-scaling","title":"Scaling AKS with Cluster Autoscaler and KEDA","description":"Introduction","source":"@site/docs/aks/aks-scaling.md","sourceDirName":"aks","slug":"/aks/aks-scaling","permalink":"/docs/aks/aks-scaling","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Kubernetes","permalink":"/docs/category/kubernetes"},"next":{"title":"Using Workload Identities in Azure Kubernetes Service","permalink":"/docs/aks/aks-workload-identity"}}');var s=r(4848),a=r(8453);const i={},o="Scaling AKS with Cluster Autoscaler and KEDA",c={},d=[{value:"Introduction",id:"introduction",level:3},{value:"KEDA",id:"keda",level:3},{value:"Basic idea",id:"basic-idea",level:4},{value:"Configuring what and how to scale",id:"configuring-what-and-how-to-scale",level:4},{value:"AKS Cluster Autoscaler",id:"aks-cluster-autoscaler",level:3},{value:"Explaining the setup",id:"explaining-the-setup",level:3},{value:"Setting up AKS",id:"setting-up-aks",level:3},{value:"Prerequisites",id:"prerequisites",level:4},{value:"Function to create User-Assigned Managed Identity",id:"function-to-create-user-assigned-managed-identity",level:4},{value:"Creating necessary variables",id:"creating-necessary-variables",level:4},{value:"AKS Creation and Setup",id:"aks-creation-and-setup",level:4},{value:"Creating KEDA and application identity",id:"creating-keda-and-application-identity",level:4},{value:"Applying Service Account template for the app",id:"applying-service-account-template-for-the-app",level:4},{value:"Restarting keda to enable Workload Identity",id:"restarting-keda-to-enable-workload-identity",level:4},{value:"Applying Application deployment template",id:"applying-application-deployment-template",level:4},{value:"Deploying KEDA scaled object",id:"deploying-keda-scaled-object",level:4},{value:"Useful commands",id:"useful-commands",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"scaling-aks-with-cluster-autoscaler-and-keda",children:"Scaling AKS with Cluster Autoscaler and KEDA"})}),"\n",(0,s.jsx)(n.h3,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsxs)(n.p,{children:["Azure Kubernetes Service (AKS) provides a managed Kubernetes cluster with all\r\nthe features of a self-hosted install and plays super nicely with other Azure technology.\r\nFor example, we've explored Workload Identities in ",(0,s.jsx)(n.a,{href:"https://davydrudenkoua.github.io/docs/aks/aks-workload-identity/",children:"the previous post"})," - an AKS\r\ncapability that allows developers to use Azure's RBAC for authentication instead of connection strings and secrets.\r\nAs traffic to your application fluctuates, you might want to reduce costs during downtime and get peak performance during high load periods.\r\nLuckily, in AKS you can enable KEDA with just one CLI switch and configure your pods scaling with just a few lines of YAML.\r\nIn this post we'll see how we can scale pods and nodes using ",(0,s.jsx)(n.strong,{children:"K"}),"ubernetes ",(0,s.jsx)(n.strong,{children:"E"}),"vent ",(0,s.jsx)(n.strong,{children:"D"}),"riven ",(0,s.jsx)(n.strong,{children:"A"}),"utoscaler and Cluster Autoscaler.\r\nYou can all source code used in this tutorial in one place in the ",(0,s.jsx)(n.a,{href:"https://github.com/davydrudenkoua/k8s-keda-ca-scaling",children:"post's github repo"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"keda",children:"KEDA"}),"\n",(0,s.jsx)(n.h4,{id:"basic-idea",children:"Basic idea"}),"\n",(0,s.jsxs)(n.p,{children:["The most basic tool for scaling pods is ",(0,s.jsx)(n.strong,{children:"H"}),"orizontal ",(0,s.jsx)(n.strong,{children:"P"}),"od ",(0,s.jsx)(n.strong,{children:"A"}),"utoscaler or HPA that enables\r\nhorizontal pod scaling based on CPU or Memory utilization.\r\nHowever, most modern applications have far more complex needs - for example, you might want to scale based on the amount of\r\nmessages in Service Bus, results of a MongoDB or Prometheus query or count of blobs in Azure Blob Storage - in other words, some external event.\r\nThis is where ",(0,s.jsx)(n.a,{href:"https://keda.sh/",children:"KEDA"})," with its vast selection of ",(0,s.jsx)(n.a,{href:"https://keda.sh/docs/2.16/scalers/",children:"Scalers"})," comes in,\r\nand if you can't find what you are looking for there you can create your own.\r\nKey difference between KEDA and HPA is the scaling trigger - HPA scales your pods when they are in need of more resources\r\nwhile KEDA creates new pods when some event occurs. KEDA works alongside HPA, monitoring desired event source and feeding data to HPA driving scale out/in.\r\nMore detailed overview of KEDA architecture can be found on their ",(0,s.jsx)(n.a,{href:"https://keda.sh/docs/2.16/concepts/",children:"documentation page"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["KEDA contains two main components, which are represented as pods in ",(0,s.jsx)(n.code,{children:"kube-system"})," namespace in AKS cluster."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["KEDA Metrics API Server (",(0,s.jsx)(n.code,{children:"keda-metrics-apiserver"})," pod) collects metrics from external sources that are consumed by keda-operator to drive scaling in or out."]}),"\n",(0,s.jsxs)(n.li,{children:["KEDA operator (",(0,s.jsx)(n.code,{children:"keda-operator"})," pod) acts as a scaling mastermind, ingesting metrics from ",(0,s.jsx)(n.code,{children:"keda-metrics-apiserver"})," and feeding that data to ",(0,s.jsx)(n.code,{children:"HPA"})," which adjusts the number of pods."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"configuring-what-and-how-to-scale",children:"Configuring what and how to scale"}),"\n",(0,s.jsxs)(n.p,{children:["To scale a kubernetes resource - it can even be a custom resource, although most often workloads are scaled using ",(0,s.jsx)(n.code,{children:"Deployments"})," or ",(0,s.jsx)(n.code,{children:"StatefulSets"}),",\r\nyou need to define a ",(0,s.jsx)(n.code,{children:"ScaledObject"}),". The ",(0,s.jsx)(n.code,{children:"ScaledObject"})," custom resource is a basic piece of configuration, describing what, when and how do you want to scale.\r\nFull ",(0,s.jsx)(n.code,{children:"ScaledObject"})," CRD definition can be found on ",(0,s.jsx)(n.a,{href:"https://keda.sh/docs/2.14/concepts/scaling-deployments/#scaledobject-spec",children:"its documentation page"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Another key resource is ",(0,s.jsx)(n.code,{children:"TriggerAuthentication"})," which describes how KEDA should authenticate against your event source. It enables you to use not only most basic authentication methods like connection string, but also more advances mechanisms like ",(0,s.jsx)(n.code,{children:"pod/workload identity"}),". Its CRD definition ",(0,s.jsx)(n.a,{href:"https://keda.sh/docs/2.14/concepts/authentication/#re-use-credentials-and-delegate-auth-with-triggerauthentication",children:"can be found here"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"aks-cluster-autoscaler",children:"AKS Cluster Autoscaler"}),"\n",(0,s.jsxs)(n.p,{children:["AKS Cluster Autoscaler is a component that monitors cluster for pending pods.  When it finds a pod that can't be created in any of the existing nodes, it creates new ones. It is worth noting that when you enable ",(0,s.jsx)(n.code,{children:"Cluster Autoscaler"}),", manual scaling becomes unavailable. Because AKS operates on ",(0,s.jsx)(n.code,{children:"VM Scale Sets"}),", provisioning new VMs can take some time -- around a few minutes. By default, Autoscaler expects new nodes to be provisioned in 15 minutes but you can tweak that when you enable it. You can find all available options for configuring CA on the ",(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/aks/cluster-autoscaler?tabs=azure-cli#cluster-autoscaler-profile-settings",children:"documentation page"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"explaining-the-setup",children:"Explaining the setup"}),"\n",(0,s.jsx)(n.p,{children:"In this post we will be deploying a single Docker container containing a simple Python 3.10 app.\r\nThe app connects to an Azure Service Bus Queue and echoes all received messages to the console.\r\nTo simplify config management and for security both KEDA and the python application be using Azure Workload Identity.\r\nPython app pods will be scaled by KEDA based on the count of messages in Service Bus Queue and when there are not enough resources on existing node, new node will be created by Cluster Autoscaler."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from azure.servicebus import ServiceBusClient\r\nfrom azure.identity import DefaultAzureCredential\r\nimport time\r\nimport os\r\n\r\nQUEUE_NAME = "scaling-queue"\r\nSERVICEBUS_NAMESPACE = "k8s-scaling-demo-sb-01.servicebus.windows.net"\r\nHOSTNAME = os.getenv("HOSTNAME") # AKS pod name\r\n\r\ndef receive_messages():\r\n    with ServiceBusClient(SERVICEBUS_NAMESPACE, DefaultAzureCredential()) as sb_client:\r\n        with sb_client.get_queue_receiver(QUEUE_NAME) as queue_receiver:\r\n                print(f"Successfully connected to and listening for messages from queue {QUEUE_NAME}")\r\n                while True:\r\n                     for message in queue_receiver.receive_messages(max_message_count=5, max_wait_time=5):\r\n                          print(f"Pod {HOSTNAME} received new message #{message.sequence_number}: {str(message)}, beginning processing")\r\n                          time.sleep(5)\r\n                          print(f"Pod {HOSTNAME} processed message #{message.sequence_number}")\r\n                          queue_receiver.complete_message(message)\r\n\r\nif __name__ == "__main__":\r\n    try:\r\n          receive_messages()\r\n    except Exception as exception:\r\n        print(f"Exception raised while listening to messages: {repr(exception)}")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"setting-up-aks",children:"Setting up AKS"}),"\n",(0,s.jsx)(n.h4,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Azure Subscription"}),"\n",(0,s.jsx)(n.li,{children:"Service Account with a single Queue"}),"\n",(0,s.jsx)(n.li,{children:"Azure CLI >= 2.47.0"}),"\n",(0,s.jsx)(n.li,{children:"aks-preview Azure CLI extension >= 9.0.0b7"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"function-to-create-user-assigned-managed-identity",children:"Function to create User-Assigned Managed Identity"}),"\n",(0,s.jsx)(n.p,{children:"Because we will need two managed identities for KEDA and the app itself, common part can be extracted to reusable function."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"function Add-UserIdentity {\r\n    param (\r\n        [Parameter(Mandatory)][string] $Subscription,\r\n        [Parameter(Mandatory)][string] $ResourceGroupName,\r\n        [Parameter(Mandatory)][string] $Location,\r\n        [Parameter(Mandatory)][string] $UserAssignedIdentityName,\r\n        [Parameter(Mandatory)][string] $ServiceBusNamespace,\r\n        [Parameter(Mandatory)][string] $ServiceBusRole\r\n    )\r\n    az identity create `\r\n        --name $UserAssignedIdentityName `\r\n        --resource-group $ResourceGroupName `\r\n        --location $Location\r\n\r\n    $UserAssignedIdentityClientId = $(az identity show --resource-group $ResourceGroupName --name $UserAssignedIdentityName --query 'clientId' -o tsv)\r\n\r\n    $ServiceBusId = $(az servicebus namespace show --name $ServiceBusNamespace --resource-group $ResourceGroupName --query \"id\" -o tsv)\r\n    az role assignment create `\r\n        --assignee $UserAssignedIdentityClientId `\r\n        --role $ServiceBusRole `\r\n        --scope $ServiceBusId\r\n\r\n    return  @{\r\n        ClientId = $UserAssignedIdentityClientId\r\n        TenantId = $(az identity show --resource-group $ResourceGroupName --name $UserAssignedIdentityName --query 'tenantId' -otsv)\r\n    }\r\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"creating-necessary-variables",children:"Creating necessary variables"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:'$ResourceGroupName = "k8s-scaling-demo"\r\n$ClusterName = "aks-scaling-demo"\r\n\r\n$KedaFederatedIdentityName = "keda-federated-identity"\r\n$QueueListenerFederatedIdentityName = "queue-listener-federated-identity"\r\n$KedaUserAssignedIdentityName = "keda-user-assigned-identity"\r\n$QueueListenerUserAssignedIdentityName="queue-listener-user-assigned-identity"\r\n$QueueListenerServiceAccountName = "queue-listener"\r\n$Location = $(az group show --name $ResourceGroupName --query "location" -o tsv)\r\n$SubscriptionId = $(az account show --query "id" --output tsv)\r\n$ScalingQueueName ="scaling-queue"\r\n$ScalingQueueNamespace = "k8s-scaling-demo-sb-01"\r\n\r\n$DockerUsername = $Env:DOCKER_USERNAME\r\n$DockerPassword = $Env:DOCKER_PASSWORD\r\n$DockerServer = "https://index.docker.io/v1/"\n'})}),"\n",(0,s.jsx)(n.h4,{id:"aks-creation-and-setup",children:"AKS Creation and Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:'Write-Host "Creating AKS"\r\naz aks create `\r\n        --resource-group $ResourceGroupName `\r\n        --name $ClusterName `\r\n        --enable-oidc-issuer `\r\n        --enable-workload-identity `\r\n        --enable-keda `\r\n        --generate-ssh-keys `\r\n        --location $Location `\r\n        --node-vm-size "Standard_B2s" `\r\n        --tier "free" `\r\n        --node-count 1 `\r\n        --enable-cluster-autoscaler ` # CA parameters start here\r\n        --min-count 1 `               # Lowest possible node count\r\n        --max-count 2 `               # Highest possible node count\r\n        --cluster-autoscaler-profile scan-interval=30s, ` # Check for underutilized nodes/scheduled pods every 30s\r\n            max-graceful-termination-sec=30, `\r\n            max-node-provision-time=15m, `\r\n            new-pod-scale-up-delay=10s, `                 # Ignore unscheduled pods before they are 10s old\r\n            scale-down-utilization-threshold=0.7, `       # Sum of requested resources divided by capacity below which node can be removed\r\n            scale-down-unneeded-time=1m                   # How long a node should be unneeded before it\'s eligible for scale down\r\n\r\naz aks get-credentials --name $ClusterName --resource-group $ResourceGroupName\r\n\r\n$AksOidcIssuer = $(\r\n    az aks show `\r\n        --name $ClusterName `\r\n        --resource-group $ResourceGroupName `\r\n        --query "oidcIssuerProfile.issuerUrl" `\r\n        -o tsv\r\n    )\r\nWrite-Host "AKS $ClusterName created and connected to kubectl"\r\n\r\n#Creating secret to pull Docker image from private registry\r\nkubectl create secret docker-registry queue-listener-registry-secret `\r\n    --docker-server $DockerServer `\r\n    --docker-username $DockerUsername `\r\n    --docker-password $DockerPassword\n'})}),"\n",(0,s.jsx)(n.h4,{id:"creating-keda-and-application-identity",children:"Creating KEDA and application identity"}),"\n",(0,s.jsxs)(n.p,{children:["Both ",(0,s.jsx)(n.code,{children:"KEDA"})," and ",(0,s.jsx)(n.code,{children:"queue-listener"})," are using ",(0,s.jsx)(n.code,{children:"AKS Workload Identity"})," to authenticate against Service Bus Queue, so we are assigning RBAC roles accordingly."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:'Write-Host "Creating user-assigned keda identity"\r\n$KedaIdentityParams = @{\r\n    Subscription = $SubscriptionId\r\n    ResourceGroupName = $ResourceGroupName\r\n    Location = $Location\r\n    UserAssignedIdentityName = $KedaUserAssignedIdentityName\r\n    ServiceBusNamespace = $ScalingQueueNamespace\r\n    ServiceBusRole = "Azure Service Bus Data Owner"\r\n}\r\n$KedaUserAssignedIdentityValues = Add-UserIdentity @KedaIdentityParams\r\n\r\naz identity federated-credential create `\r\n--name $KedaFederatedIdentityName `\r\n--identity-name $KedaUserAssignedIdentityName `\r\n--resource-group $ResourceGroupName `\r\n--issuer $AksOidcIssuer `\r\n--subject system:serviceaccount:kube-system:keda-operator `\r\n--audience api://AzureADTokenExchange\r\nWrite-Host "User-assigned keda identity created"\r\n\r\nWrite-Host "Creating user-assigned queue-listener identity"\r\n$QueueListenerIdentityParams = @{\r\n    Subscription = $SubscriptionId\r\n    ResourceGroupName = $ResourceGroupName\r\n    Location = $Location\r\n    UserAssignedIdentityName = $QueueListenerUserAssignedIdentityName\r\n    ServiceBusNamespace = $ScalingQueueNamespace\r\n    ServiceBusRole = "Azure Service Bus Data Receiver"\r\n}\r\n$QueueListenerUserAssignedIdentityValues = Add-UserIdentity @QueueListenerIdentityParams\r\n\r\naz identity federated-credential create `\r\n    --name $QueueListenerFederatedIdentityName `\r\n    --identity-name $QueueListenerUserAssignedIdentityName `\r\n    --resource-group $ResourceGroupName `\r\n    --issuer $AksOidcIssuer `\r\n    --subject system:serviceaccount:default:$QueueListenerServiceAccountName `\r\n    --audience api://AzureADTokenExchange\r\nWrite-Host "User-assigned queue-listener identity created"\n'})}),"\n",(0,s.jsx)(n.h4,{id:"applying-service-account-template-for-the-app",children:"Applying Service Account template for the app"}),"\n",(0,s.jsxs)(n.p,{children:["Application's Service Account is really simple and is needed to bind pod to existing User-Assigned Managed Identity.\r\n",(0,s.jsx)(n.code,{children:"{{QUEUE_LISTENER_USER_ASSIGNED_CLIENT_ID}}"})," will be replaced by an actual value later in the script when the template is actually applied."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\r\nkind: ServiceAccount\r\nmetadata:\r\n  annotations:\r\n    azure.workload.identity/client-id: {{QUEUE_LISTENER_USER_ASSIGNED_CLIENT_ID}}\r\n  name: queue-listener\n"})}),"\n",(0,s.jsx)(n.p,{children:"Configuring and applying the template:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:'Write-Host "Creating queue-listener service account"\r\n$QueueListenerServiceAccountTemplate = Get-Content -Path "k8s/service-accounts/queue-listener.service-account.yaml" -Raw\r\n$QueueListenerServiceAccountTemplate = $QueueListenerServiceAccountTemplate -replace `\r\n    "{{QUEUE_LISTENER_USER_ASSIGNED_CLIENT_ID}}", $QueueListenerUserAssignedIdentityValues.ClientId\r\n\r\n$QueueListenerServiceAccountTemplate | kubectl apply -f -\r\nWrite-Host "Queue-listener service account created"\n'})}),"\n",(0,s.jsx)(n.h4,{id:"restarting-keda-to-enable-workload-identity",children:"Restarting keda to enable Workload Identity"}),"\n",(0,s.jsx)(n.p,{children:"This needs to be done because even though AKS was created with Workload Identity enabled, KEDA didn't start using it and needs to be restarted."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"kubectl rollout restart deploy keda-operator -n kube-system\n"})}),"\n",(0,s.jsx)(n.h4,{id:"applying-application-deployment-template",children:"Applying Application deployment template"}),"\n",(0,s.jsx)(n.p,{children:"The actual deployment has only one pod running a Docker image from private registry and it will be automatically scaled by KEDA."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name:  queue-listener\r\n  labels:\r\n    app:  queue-listener\r\nspec:\r\n  selector:\r\n    matchLabels:\r\n      app: queue-listener\r\n  template:\r\n    metadata:\r\n      labels:\r\n        app:  queue-listener\r\n        azure.workload.identity/use: "true"\r\n    spec:\r\n      serviceAccountName: queue-listener\r\n      containers:\r\n      - name:  queue-listener\r\n        image:  davydrudenkoua/queue-listener:latest\r\n        resources:\r\n          requests:\r\n            cpu: 300m\r\n            memory: 300Mi\r\n          limits:\r\n            cpu: 300m\r\n            memory: 300Mi\r\n      imagePullSecrets:\r\n        - name: queue-listener-registry-secret\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:'Write-Host "Creating queue-listener deployment"\r\nkubectl apply -f "k8s/deployments/queue-listener.deployment.yaml"\r\nWrite-Host "Queue-listener deployment created"\n'})}),"\n",(0,s.jsx)(n.h4,{id:"deploying-keda-scaled-object",children:"Deploying KEDA scaled object"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: keda.sh/v1alpha1\r\nkind: TriggerAuthentication # CRD that defines Workload Identity authentication to be used for scaling\r\nmetadata:\r\n  name: queue-listener-sb-auth\r\nspec:\r\n  podIdentity:\r\n    provider: azure-workload\r\n    identityId: {{KEDA_USER_ASSIGNED_IDENTITY_CLIENT_ID}}\r\n---\r\napiVersion: keda.sh/v1alpha1\r\nkind: ScaledObject\r\nmetadata:\r\n  name: queue-listener-sb-scaledobject\r\nspec:\r\n  scaleTargetRef:\r\n    kind: Deployment                # Optional\r\n    name: queue-listener            # Must be in the same namespace as the ScaledObject\r\n  minReplicaCount: 0\r\n  maxReplicaCount: 5\r\n  cooldownPeriod: 15                # The time in seconds to wait after the last\r\n                                    # trigger invocation before scaling in\r\n  triggers:\r\n  - type: azure-servicebus\r\n    metadata:\r\n      queueName: {{SCALING_QUEUE_NAME}}\r\n      namespace: {{SCALING_QUEUE_NAMESPACE}}\r\n      messageCount: "10"            # Basically a number of messages one pod can reliably handle\r\n      activationMessageCount: "0"   # Optional. The number of messages until KEDA activates the scaler.\r\n                                    # For example, # if you have activationMessageCount: "5"\r\n                                    # and minReplicaCount: 0, KEDA won\'t  create any pods if\r\n                                    # there are less than 5 active messages\r\n    authenticationRef:\r\n      name: queue-listener-sb-auth\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:'Write-Host "Deploying queue-listener scaled object"\r\n$ScaledObjectAccountTemplate = Get-Content -Path "k8s/keda/queue-listener.scaled-object.yaml" -Raw\r\n$ScaledObjectAccountTemplate = $ScaledObjectAccountTemplate -replace "{{KEDA_USER_ASSIGNED_IDENTITY_CLIENT_ID}}", $KedaUserAssignedIdentityValues.ClientId\r\n$ScaledObjectAccountTemplate = $ScaledObjectAccountTemplate -replace "{{SCALING_QUEUE_NAME}}", $ScalingQueueName\r\n$ScaledObjectAccountTemplate = $ScaledObjectAccountTemplate -replace "{{SCALING_QUEUE_NAMESPACE}}", $ScalingQueueNamespace\r\n$ScaledObjectAccountTemplate | kubectl apply -f -\r\nWrite-Host "Queue-listener scaled object created"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"useful-commands",children:"Useful commands"}),"\n",(0,s.jsx)(n.p,{children:"Get AKS CA logs"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"kubectl get events --field-selector source=cluster-autoscaler\n"})}),"\n",(0,s.jsx)(n.p,{children:"Watching pod logs in real-time"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"kubectl logs <pod-name> --follow\n"})}),"\n",(0,s.jsx)(n.p,{children:"Getting KEDA logs"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"kubectl get pod -n kube-system # locate keda-operator pod\r\nkubectl logs <keda-operator-pod-name>\n"})}),"\n",(0,s.jsx)(n.p,{children:"Checking if workload identity is enabled for KEDA"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-powershell",children:"kubectl get pod -n kube-system # locate keda-operator pod\r\nkubectl describe pod <keda-operator-pod-name> -n kube-system # Look for AZURE_TENANT_ID,\r\n                                                             # AZURE_FEDERATED_IDENTITY_FILE\r\n                                                             # and AZURE_AUTHORITY_HOST variables\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var t=r(6540);const s={},a=t.createContext(s);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);